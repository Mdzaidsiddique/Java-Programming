* type safety: Prevents assigning wrong types (with generics = type-safe)
* type casting: Explicitly converting one type into another (when the compiler is unsure of the actual type at runtime)

* generics = write once, use for any type (with type safety).
  or: mechanism in java, allow to create class, interface, methods that operates over verity of types
      ensuring type safety

* Unbounded type <?> : Don’t care about the type, any type is allowed
                     - Useful when you don’t care about the actual type

* Bounded type: restrict the type parameter to a certain type or its subclasses/superclasses
      a) Upper bound (<? extends T>) → Accepts T and its children (good for reading)
      b) Lower bound (<? super T>) → Accepts T and its parents (good for writing)

* Covariant: <? extends T> (read only) can contain T type or subType of T
           - Arrays are said to be covariant, i.e, array of type T may contains type T or subtype of T

* Contra-Variant: <? super T> (write only) can contain T or its super type

* type-erasure: generic type get erased after compilation
                (not available to JVM at runtime-> get converted into objects)
       or: - when we use Generics in Java, the compiler checks types at compile time (for type safety),
             but at runtime, the type information (<T>, <String>, <Integer>, etc.) is erased (removed).
           - This process is called Type Erasure.